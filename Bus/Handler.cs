using System.Collections.Generic;
using System;

namespace Bus
{
    public interface Handler
    {
        /// <summary>
        /// Добавляет запросы на обработку.
        /// </summary>
        /// <remarks>
        /// В зависимости от реализации запросы могут вставать в очередь,
        /// вытеснять друг друга, группироваться и т.д.
        /// </remarks>
        void AddRequestToHandle(Request req);


        /// <summary>
        /// Провоцирует обработчик обработать всё то, что было добавлено в него
        /// перед вызовом этой функции.
        /// Логика работы предполагает, что перед этим методом будет вызван метод синхронизации Update.
        /// </summary>

        /// <remarks>
        /// В зависимости от реализации обработчик может обрабатывать все запросы,
        /// не делать ничего (если, например, не выполнено какое-либо внешнее предусловие обработки), 
        /// делегировать обработку другим компонентам и классам.
        /// </remarks>
        List<Request> HandleRequests();


        /// <summary>
        /// Обновляет внутренний таймер обработчика.
        /// Нужен для синхронизации работы всей системы симуляции и компонентов обработки запросов.
        /// </summary>
        /// <remarks>
        /// При изменении общего времени симуляции необходимо сообщить обработчику, 
        /// сколько времени прошло, чтобы исполнитель мог понимать каким ресурсом 
        /// для обработки запросов он обладает.
        /// Если этот ресурс не важен для конкретоной реализации обработчика, то 
        /// этот метод будет пустым.
        /// </remarks>
        void Update(TimeSpan dt);


        /// <summary>
        /// Возвращает количество запросов, оставшихся в очереди.
        /// </summary>
        /// <remarks>
        /// В зависимости от реализации может менять своё поведение, 
        /// важно уточнить как ведет себя конкретный реализующий класс пеерд использованием.
        /// </remarks>
        int QueuedRequests();


        bool isAbaleToAdd();
    }
}
